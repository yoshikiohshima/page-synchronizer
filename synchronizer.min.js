/* globals Croquet */

/*
Copyright 2020, 2021 Yoshiki Ohshima

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

class SimplePageModel extends Croquet.Model {
    init() {
        this.location = null;
        this.subscribe(this.id, "position", this.position);
    }

    position(data) {
        this.location = data; // {ratio, viewId}
        this.publish(this.id, "setPosition", data);
    }
}

SimplePageModel.register("SimplePageModel");

class SimplePageView extends Croquet.View {
    constructor(model) {
        super(model);
        this.model = model;
        this.subscribe(this.model.id, "setPosition", this.setPosition);
        this.subscribe(this.viewId, "synced", this.synced);
        window.document.onscroll = evt => this.scroll(evt);
        this.ratio = 0; // where this view thinks where my scroll position ratio  is
        this.receivedRatio = 0; // where the last received ratio;
        this.lastSetTime = 0;
        this.lastPublishTime = 0;
        this.toBePublished = null;
        if (this.model.location) {
            this.lastPublishTime = Date.now();
            this.setPosition(this.model.location);
        }
    }

    detach() {
        super.detach();
        window.document.onscroll = null;
    }

    initCroquetMessenger() {
        Croquet.Messenger.setReceiver(this);
        if (window.parent !== window) {
            Croquet.Messenger.startPublishingPointerMove();
        }
        Croquet.Messenger.on("userCursor", "handleUserCursor");
        Croquet.Messenger.send("userCursorRequest");
    }

    synced(data) {
        if (data) {
            let body = window.document.body;
            let ratio = body.scrollTop / body.scrollHeight;
            this.ratio = ratio;
            console.log("synced", ratio);
        }
    }

    setPosition(data) {
        let {ratio, viewId} = data;
        if (viewId === this.viewId) {return;}
        let body = window.document.body;
        body.scrollTop = Math.floor(body.scrollHeight * ratio);
        this.receivedRatio = ratio;
        this.lastSetTime = Date.now();

        // console.log("set", ratio, body.scrollTop, this.lastSetTime);
    }

    scroll(_evt) {
        let body = window.document.body;
        let ratio = body.scrollTop / body.scrollHeight;
        if (Math.abs(this.ratio - ratio) < 0.001) {return;}
        let now = Date.now();
        // console.log("lastSetTime", this.lastSetTime, now - this.lastSetTime);
        if (now - this.lastSetTime < 50) {return;}
        this.toBePublished = ratio;
        let diff = now - this.lastPublishTime;
        // console.log("ratio", this.ratio, ratio, diff);
        if (diff < 30) {
            if (!this.timer) {
                this.timer = window.setTimeout(() => this.publishPosition(), 30);
            }
            return;
        }
        this.lastPublishTime = now;
        this.publishPosition();
    }

    publishPosition() {
        this.timer = null;
        if (this.toBePublished === null) {return;}
        // console.log("publish", this.toBePublished);
        this.publish(this.model.id, "position", {ratio: this.toBePublished, viewId: this.viewId});
        this.toBePublished = null;
    }

    handleUserCursor(data) {
        window.document.body.style.setProperty("cursor", data);
    }

    static start(opts) {
        let host = window.location.hostname;
        let path = window.location.pathname;

        let rHostParts = host.split(".").reverse();
        if (rHostParts.length === 1) {// localhost
            rHostParts.unshift("io");
        }

        let rHost = rHostParts.join(".");
        let rPath = path.split("/").filter(str => str.length > 0).reverse().join(".");
        let appId = rHost;
        if (rPath.length > 0) {
            appId += "." + rPath;
        }
        let options = {
            ...{
                appId,
                name: window.location.href,
                model: SimplePageModel,
                view: SimplePageView,
                password: "scroll-dummy-pass",
                eventRateLimit: 60,
                tps: 0,
            },
            ...opts
        };

        return Croquet.Session.join(options).then((session) => session.view.initCroquetMessenger());
    }
}
